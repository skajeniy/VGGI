const vertexShaderSource = `
attribute vec3 vertex; // Vertex position
attribute vec3 normal; // Vertex normal

uniform vec3 color;
uniform mat4 ModelViewProjectionMatrix; // Projection mat
uniform mat4 ModelViewMatrix; // View mat
uniform mat4 NormalMatrix; // Normal mat

uniform vec3 lightPosition; // Light pos
uniform vec3 ambientLight; // Light intensity
uniform vec3 viewPosition; // Camera pos

varying vec4 fragColor;

void main() {
    vec4 position = ModelViewMatrix * vec4(vertex, 1.0);
    vec3 fragPosition = position.xyz;
    vec3 norm = normalize((NormalMatrix * vec4(normal, 0.0)).xyz);
    
    vec3 lightDir = normalize(lightPosition - fragPosition); // Light direction
    vec3 viewDir = normalize(viewPosition - fragPosition); // View direction
    vec3 ambient = ambientLight * vec3(0.7, 0.7, 0.7); // ambient
	float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * vec3(0.7, 0.7, 0.7);  // diffusion
    float spec = pow(max(dot(norm, normalize(lightDir + viewDir)), 0.0), 16.0);
    vec3 specular = vec3(0.3) * spec; // specular

    vec3 finalColor = ambient + diffuse + specular; // fin mix
    fragColor = vec4(finalColor, 1.0);
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}
`;


const fragmentShaderSource = `
	precision mediump float;
	
varying vec4 fragColor;

void main() {
    gl_FragColor = fragColor;
}
`;