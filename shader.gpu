const vertexShaderSource = `
precision mediump float;

attribute vec3 vertex;        // Vertex position
attribute vec3 normal;        // Vertex normal
attribute vec2 tex;           // Texture coordinates
attribute vec3 tangent; 	  // Tangent vector

uniform mat4 ModelViewProjectionMatrix; // Combined projection
uniform mat4 ModelViewMatrix;           // Model-View matrix
uniform mat4 NormalMatrix;              // Normal transformation
uniform vec3 lightPosition;             // Light position
uniform vec3 ambientLight;              // Ambient light 
uniform vec3 viewPosition;              // Camera position
uniform mat3 u_texTransform;            // Texture transformation
uniform mediump vec2 u_pivot;           // Pivot

varying vec3 fragTangent;
varying vec3 fragBitangent;
varying vec3 fragNormal;      
varying vec3 fragPosition;    
varying vec2 vTexCoords;      

void main() {
    vec3 texCoordsTmp = vec3(tex - u_pivot, 1.0);
    texCoordsTmp = u_texTransform * texCoordsTmp;
    vTexCoords = texCoordsTmp.xy + u_pivot;

    vec4 worldPosition = ModelViewMatrix * vec4(vertex, 1.0);
    fragPosition = worldPosition.xyz;

    fragNormal = normalize((NormalMatrix * vec4(normal, 0.0)).xyz);

	fragTangent = normalize((NormalMatrix * vec4(tangent, 0.0)).xyz);
    fragBitangent = normalize(cross(fragNormal, fragTangent));

    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}`;

const fragmentShaderSource = `
precision mediump float;

//Textures
uniform sampler2D iTMU0;       // Diffuse texture
uniform sampler2D iTMU1;       // Specular texture
uniform sampler2D iTMU2;       // Normal map

uniform mediump vec2 u_pivot;  // Pivot
uniform float u_pivotRadius;   // Pivot radius

//Light
uniform vec3 lightPosition;    // Light pos
uniform vec3 ambientLight;     // Ambient intensity
uniform vec3 viewPosition;     // Camera pos


varying vec3 fragTangent;      // Tangent 
varying vec3 fragBitangent;    // Bitangent 
varying vec3 fragNormal;       // Normal
varying vec3 fragPosition;     // Position
varying vec2 vTexCoords;       // Transformed texture

void main() {
    vec3 norm = normalize(fragNormal);
    vec3 tangent = normalize(fragTangent - dot(fragTangent, norm) * norm);
    vec3 bitangent = cross(norm, tangent);
	
    vec3 normalMap = texture2D(iTMU2, vTexCoords).rgb;
    normalMap = normalize(normalMap * 2.0 - 1.0);
    vec3 perturbedNormal = normalize(mat3(tangent, bitangent, norm) * normalMap) + vec3(0.2);

    vec3 lightDir = normalize(lightPosition - fragPosition);
    vec3 viewDir = normalize(viewPosition - fragPosition);

    vec3 ambient = ambientLight * vec3(0.7);
    float diff = max(dot(perturbedNormal, lightDir), 0.2);
    vec3 diffuse = diff * texture2D(iTMU0, vTexCoords).rgb;
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(perturbedNormal, halfwayDir), 0.0), 8.0);
    vec3 specular = texture2D(iTMU1, vTexCoords).rgb * spec;

    vec3 baseColor = ambient + diffuse + specular;

	
    float distance = length(vTexCoords - u_pivot);
    if (distance < u_pivotRadius) {
        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); // Red pivot point marker
    } else {
        gl_FragColor = vec4(baseColor, 1.0);
    }
}
`;
