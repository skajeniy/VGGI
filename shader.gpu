// Vertex Shader
const vertexShaderSource = `
attribute vec3 vertex;        // Vertex position
attribute vec3 normal;        // Vertex normal
attribute vec2 tex;           // Texture coordinates
attribute vec3 tangent; 	  // Tangent vector

uniform mat4 ModelViewProjectionMatrix; // Combined projection matrix
uniform mat4 ModelViewMatrix;           // Model-View matrix
uniform mat4 NormalMatrix;              // Normal transformation matrix
uniform vec3 lightPosition;             // Light position in world space
uniform vec3 ambientLight;              // Ambient light intensity
uniform vec3 viewPosition;              // Camera position in world space

varying vec3 fragTangent;
varying vec3 fragBitangent;
varying vec3 fragNormal;      // Pass normal to fragment shader
varying vec3 fragPosition;    // Pass world position to fragment shader
varying vec2 vTexCoords;       // Pass texture coordinates to fragment shader

void main() {
    // Pass texture coordinates to fragment shader
    vTexCoords = tex;

    // Transform vertex position to world space
    vec4 worldPosition = vec4(vertex, 1.0);
    fragPosition = worldPosition.xyz;

    // Transform and normalize the normal vector
    fragNormal = normalize((NormalMatrix * vec4(normal, 0.0)).xyz);

	fragTangent = normalize((NormalMatrix * vec4(tangent, 0.0)).xyz);
    fragBitangent = normalize(cross(fragNormal, fragTangent));

    // Transform vertex position to clip space
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}`;

const fragmentShaderSource = `
precision mediump float;

uniform sampler2D iTMU0;       // Diffuse texture
uniform sampler2D iTMU1;       // Specular texture
uniform sampler2D iTMU2;       // Normal map
uniform vec3 lightPosition;    // Light position in world space
uniform vec3 ambientLight;     // Ambient light intensity
uniform vec3 viewPosition;     // Camera position in world space

varying vec3 fragTangent;      // Tangent vector
varying vec3 fragBitangent;    // Bitangent vector
varying vec3 fragNormal;       // Normal from vertex shader
varying vec3 fragPosition;     // Position from vertex shader
varying vec2 vTexCoords;       // Texture coordinates

void main() {
    vec3 norm = normalize(fragNormal);
    vec3 tangent = normalize(fragTangent - dot(fragTangent, norm) * norm);
    vec3 bitangent = cross(norm, tangent);
    mat3 TBN = mat3(tangent, bitangent, norm);

    vec3 normalMap = texture2D(iTMU2, vTexCoords).rgb;
    normalMap = normalize(normalMap * 2.0 - 1.0);  // Map from [0,1] to [-1,1]
    vec3 perturbedNormal = normalize(TBN * normalMap) + vec3(0.2);

    vec3 lightDir = normalize(lightPosition - fragPosition);
    vec3 viewDir = normalize(viewPosition - fragPosition);

    vec3 ambient = ambientLight * vec3(0.7);
    float diff = max(dot(perturbedNormal, lightDir), 0.2);
    vec3 diffuse = diff * texture2D(iTMU0, vTexCoords).rgb;
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(perturbedNormal, halfwayDir), 0.0), 8.0);
    vec3 specular = texture2D(iTMU1, vTexCoords).rgb * spec;

    vec3 finalColor = ambient + diffuse + specular;
    gl_FragColor = vec4(finalColor, 1);
}
`;
